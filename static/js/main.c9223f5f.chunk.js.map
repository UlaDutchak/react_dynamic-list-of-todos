{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.js","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","query","filterBy","handleChange","event","target","name","value","setState","getFilteredTodos","todos","props","visibleTasks","filter","todo","title","toLowerCase","includes","completed","this","selectUser","filteredTodos","className","type","onChange","map","classNames","checked","readOnly","onClick","userId","id","React","Component","BASE_URL","getUsers","fetch","then","response","json","CurrentUser","user","a","reloadUser","prevProps","email","phone","resetUser","App","selectedUserId","task","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c9223f5f.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  todos: Todo[];\n  selectUser: (userId: number) => void;\n};\n\ntype State = {\n  query: string;\n  filterBy: string;\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    query: '',\n    filterBy: '',\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value } = event.target;\n\n    this.setState({ [name]: value } as Pick<State, keyof State>);\n  };\n\n  getFilteredTodos = () => {\n    const { todos } = this.props;\n\n    let visibleTasks = todos.filter(todo => (todo.title\n      && todo.title.toLowerCase().includes(this.state.query.toLowerCase())));\n\n    visibleTasks = visibleTasks.filter(todo => {\n      switch (this.state.filterBy) {\n        case 'Active':\n          return !todo.completed;\n        case 'Completed':\n          return todo.completed;\n        case 'All':\n        default:\n          return todos;\n      }\n    });\n\n    return visibleTasks;\n  };\n\n  render() {\n    const { query, filterBy } = this.state;\n    const { selectUser } = this.props;\n    const filteredTodos = this.getFilteredTodos();\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <div className=\"TodoList__form\">\n          <input\n            type=\"text\"\n            name=\"query\"\n            value={query}\n            className=\"TodoList__item item\"\n            onChange={this.handleChange}\n          />\n\n          <select\n            name=\"filterBy\"\n            className=\"TodoList__item\"\n            value={filterBy}\n            onChange={this.handleChange}\n          >\n            <option value=\"All\">All</option>\n            <option value=\"Active\">Active</option>\n            <option value=\"Completed\">Completed</option>\n          </select>\n        </div>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map((todo) => (\n              <li\n                key={todo.id}\n                className={classNames(\n                  'TodoList__item',\n                  {\n                    'TodoList__item--unchecked': !todo.completed,\n                    'TodoList__item--checked': todo.completed,\n                  },\n                )}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n                <button\n                  className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\n                  \"\n                  type=\"button\"\n                  onClick={() => {\n                    selectUser(todo.userId);\n                  }}\n                >\n                  User&nbsp;#1\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = () => {\n  return fetch(`${BASE_URL}/todos`)\n    .then(response => response.json());\n};\n\nexport const getUsers = (userId) => {\n  return fetch(`${BASE_URL}/users/${userId}`)\n    .then(response => response.json());\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUsers } from '../../api/api';\n\ninterface Props {\n  userId: number;\n  resetUser: () => void;\n}\n\ninterface State {\n  user: User | null\n}\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  async componentDidMount() {\n    await this.reloadUser(this.props.userId);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      this.reloadUser(this.props.userId);\n    }\n  }\n\n  async reloadUser(userId: number) {\n    const user = await getUsers(userId);\n\n    this.setState({ user });\n  }\n\n  render() {\n    const { user } = this.state;\n\n    return (\n      user && (\n        <>\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\">\n              <span>{`Selected user: ${user.id}`}</span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">\n              {user.name}\n            </h3>\n            <p className=\"CurrentUser__email\">\n              {user.email}\n            </p>\n            <p className=\"CurrentUser__phone\">\n              {user.phone}\n            </p>\n          </div>\n          <button\n            type=\"button\"\n            className=\"button CurrentUser__clear\"\n            onClick={this.props.resetUser}\n          >\n            reset\n          </button>\n        </>\n      )\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[];\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n  };\n\n  async componentDidMount() {\n    const task = await getTodos();\n\n    this.setState({\n      todos: task,\n    });\n  }\n\n  selectUser = (userId: number) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  };\n\n  resetUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  };\n\n  render() {\n    const { selectedUserId, todos } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectUser={this.selectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                resetUser={this.resetUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}